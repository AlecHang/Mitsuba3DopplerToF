{
    # This list specifies variants of Mitsuba that should be included
    # during compilation. note that enabling many features here can
    # lead to slow build times and very large binaries.
    #
    # Available features (which can often be combined) include
    #
    # 1. Basic arithmetic type used for computation
    #
    #    - 'scalar': Computation is done on the CPU using ordinary
    #      floating point arithmetic as in Mitsuba 0.5. This is the
    #      preferred mode for fixing compilation errors (there is
    #      relatively little templating) and debugging the renderer.
    #
    #    - 'llvm': Computation is done on the CPU using Enoki's
    #      Just-in-time compiler to generate LLVM kernels on the fly.
    #      In this case, Mitsuba becomes a wavefront path tracer.
    #
    #    - 'llvm_autodiff': building on the properties of the 'llvm'
    #      variant, computation additionally keeps track of derivatives,
    #      enabling the use of Mitsuba 2 for optimization and the
    #      solution of challenging inverse problems.
    #
    #    - 'cuda': Computation is done on the GPU using Enoki's
    #      Just-in-time compiler to generate CUDA kernels on the fly.
    #      In this case, Mitsuba becomes a wavefront path tracer that
    #      performs ray tracing using NVIDIA's OptiX library.
    #
    #    - 'cuda_autodiff': building on the properties of the 'cuda'
    #      variant, computation additionally keeps track of derivatives,
    #      enabling the use of Mitsuba 2 for optimization and the
    #      solution of challenging inverse problems.
    #
    # 2. Representation of color
    #
    #    - 'mono': Monochromatic simulation, i.e., simply don't simulate
    #      color at all. This is useful when simulating scenes that are
    #      inherently monochromatic (e.g. with single-frequency laser
    #      illumination.) All input scene data is converted to grayscale.
    #
    #    - 'rgb': Simulate light transport using an RGB-based color
    #      representation (as e.g. done in Mitsuba 0.5). This is not
    #      particular realistic and somewhat arbitrary as multiplying
    #      RGB colors can yield dramatically different answers depending
    #      on the underlying RGB color space.
    #
    #    - 'spectral': Integrate over continuous wavelengths spanning the
    #      visible spectrum (360..830 nm). Any RGB data provided in the input
    #      scene has to be up-sampled into plausible equivalent spectra
    #      in this case.
    #
    #  Each color mode can additionally have the suffix "_polarized", in which
    #  case Mitsuba will additionally keep track of the polarization state of
    #  light. Builtin materials based on specular reflection and refraction
    #  will also switch to the polarized form of the Fresnel equations.
    #
    # 3. Precision
    #
    #    - default: Mitsuba normally uses single precision for all computation.
    #
    #    - 'double': Sometimes, it can be useful to compile a higher-precision
    #       version of the renderer to determine if an issue arises due to
    #       insufficient floating point accuracy.
    #
    # These 3 feature dimensions can then be concatenated into longer variant
    # names like "scalar_spectral_polarized_double" that are defined in more
    # detail in the remainder of this file. Note that it is possible to create
    # additional variants that are not explicitly mentioned here. To do so, you
    # will have to create a corresponding entry specifying 'float' and
    # 'spectrum' C++ types.

    "enabled": [
        # The "scalar_rgb" variant *must* be included at the moment.
        "scalar_rgb",
        "scalar_spectral"
    ],

    # If mitsuba is launched without any specific mode parameter,
    # the configuration below will be used by default

    "default": "scalar_spectral",

    # The variant below will automatically be set when importing the Python
    # mitsuba module. If the value is "", the desired variant will need to be
    # specified using "mitsuba.set_variant(..)" before importing any packages.

    "python-default": "",

    # -------------------------------------------------------------
    # The remainder of this file defines the variants and does not
    # need to be edited (unless you wish to create new variants).
    # -------------------------------------------------------------

    # Scalar variant definitions

    "scalar_mono": {
        "float": "float",
        "spectrum": "Color<Float, 1>"
    },

    "scalar_mono_double": {
        "float": "double",
        "spectrum": "Color<Float, 1>"
    },

    "scalar_mono_polarized": {
        "float": "float",
        "spectrum": "MuellerMatrix<Color<Float, 1>>"
    },

    "scalar_mono_polarized_double": {
        "float": "double",
        "spectrum": "MuellerMatrix<Color<Float, 1>>"
    },

    "scalar_rgb": {
        "float": "float",
        "spectrum": "Color<Float, 3>"
    },

    "scalar_rgb_double": {
        "float": "double",
        "spectrum": "Color<Float, 3>"
    },

    "scalar_rgb_polarized": {
        "float": "float",
        "spectrum": "MuellerMatrix<Color<Float, 3>>"
    },

    "scalar_rgb_polarized_double": {
        "float": "double",
        "spectrum": "MuellerMatrix<Color<Float, 3>>"
    },

    "scalar_spectral": {
        "float": "float",
        "spectrum": "Spectrum<Float, 4>"
    },

    "scalar_spectral_double": {
        "float": "double",
        "spectrum": "Spectrum<Float, 4>"
    },

    "scalar_spectral_polarized": {
        "float": "float",
        "spectrum": "MuellerMatrix<Spectrum<Float, 4>>"
    },

    "scalar_spectral_polarized_double": {
        "float": "double",
        "spectrum": "MuellerMatrix<Spectrum<Float, 4>>"
    },


    # LLVM variants

    "llvm_mono": {
        "float": "ek::LLVMArray<float>",
        "spectrum": "Color<Float, 1>"
    },

    "llvm_mono_polarized": {
        "float": "ek::LLVMArray<float>",
        "spectrum": "MuellerMatrix<Color<Float, 1>>"
    },

    "llvm_rgb": {
        "float": "ek::LLVMArray<float>",
        "spectrum": "Color<Float, 3>"
    },

    "llvm_rgb_polarized": {
        "float": "ek::LLVMArray<float>",
        "spectrum": "MuellerMatrix<Color<Float, 3>>"
    },

    "llvm_spectral": {
        "float": "ek::LLVMArray<float>",
        "spectrum": "Spectrum<Float, 4>"
    },

    "llvm_spectral_polarized": {
        "float": "ek::LLVMArray<float>",
        "spectrum": "MuellerMatrix<Spectrum<Float, 4>>"
    },

    "llvm_autodiff_mono": {
        "float": "ek::DiffArray<ek::LLVMArray<float>>",
        "spectrum": "Color<Float, 1>"
    },

    "llvm_autodiff_mono_polarized": {
        "float": "ek::DiffArray<ek::LLVMArray<float>>",
        "spectrum": "MuellerMatrix<Color<Float, 1>>"
    },

    "llvm_autodiff_rgb": {
        "float": "ek::DiffArray<ek::LLVMArray<float>>",
        "spectrum": "Color<Float, 3>"
    },

    "llvm_autodiff_rgb_polarized": {
        "float": "ek::DiffArray<ek::LLVMArray<float>>",
        "spectrum": "MuellerMatrix<Color<Float, 3>>"
    },

    "llvm_autodiff_spectral": {
        "float": "ek::DiffArray<ek::LLVMArray<float>>",
        "spectrum": "Spectrum<Float, 4>"
    },

    "llvm_autodiff_spectral_polarized": {
        "float": "ek::DiffArray<ek::LLVMArray<float>>",
        "spectrum": "MuellerMatrix<Spectrum<Float, 4>>"
    },

    # GPU variants (note: currently no double precision variants since
    # double precision ray tracing is not supported by OptiX)

    "cuda_mono": {
        "float": "ek::CUDAArray<float>",
        "spectrum": "Color<Float, 1>"
    },

    "cuda_mono_polarized": {
        "float": "ek::CUDAArray<float>",
        "spectrum": "MuellerMatrix<Color<Float, 1>>"
    },

    "cuda_rgb": {
        "float": "ek::CUDAArray<float>",
        "spectrum": "Color<Float, 3>"
    },

    "cuda_rgb_polarized": {
        "float": "ek::CUDAArray<float>",
        "spectrum": "MuellerMatrix<Color<Float, 3>>"
    },

    "cuda_spectral": {
        "float": "ek::CUDAArray<float>",
        "spectrum": "Spectrum<Float, 4>"
    },

    "cuda_spectral_polarized": {
        "float": "ek::CUDAArray<float>",
        "spectrum": "MuellerMatrix<Spectrum<Float, 4>>"
    },

    "cuda_autodiff_mono": {
        "float": "ek::DiffArray<ek::CUDAArray<float>>",
        "spectrum": "Color<Float, 1>"
    },

    "cuda_autodiff_mono_polarized": {
        "float": "ek::DiffArray<ek::CUDAArray<float>>",
        "spectrum": "MuellerMatrix<Color<Float, 1>>"
    },

    "cuda_autodiff_rgb": {
        "float": "ek::DiffArray<ek::CUDAArray<float>>",
        "spectrum": "Color<Float, 3>"
    },

    "cuda_autodiff_rgb_polarized": {
        "float": "ek::DiffArray<ek::CUDAArray<float>>",
        "spectrum": "MuellerMatrix<Color<Float, 3>>"
    },

    "cuda_autodiff_spectral": {
        "float": "ek::DiffArray<ek::CUDAArray<float>>",
        "spectrum": "Spectrum<Float, 4>"
    },

    "cuda_autodiff_spectral_polarized": {
        "float": "ek::DiffArray<ek::CUDAArray<float>>",
        "spectrum": "MuellerMatrix<Spectrum<Float, 4>>"
    }
}
